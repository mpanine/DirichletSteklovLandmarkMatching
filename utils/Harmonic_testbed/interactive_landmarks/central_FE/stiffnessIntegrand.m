function f = stiffnessIntegrand(l1, a, b, R, ind1, ind2)
%INTEGRAND produces the integrand to be numerically itegrated to compute
%the stifness corresponding to an edge of a triangle in standard form
%l1, tmax, a, b, R: parameters of standard triangle and internal radius
%ind1, ind2: standard indices of the desired vertices (0,1,2 can be equal)

i1 = min(ind1,ind2); %Standardize the order
i2 = max(ind1,ind2);


if i1 == 0 && i2 == 0

    f = @(t) (1/2).*((-1).*b.^2.*l1.^2.*R.^2.*((-3)+2.*log(R)).*((a+(-1).*l1).* ...
                  cos(t)+b.*sin(t)).^2.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.* ...
                  sin(t)).^(-4)+b.^2.*l1.^2.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1) ...
                  .*R.*sin(t)).^(-2)+(-1).*R.^2.*(R+(-1).*b.*l1.*(b.*cos(t)+((-1).* ...
                  a+l1).*sin(t)).^(-1)).^(-2)+2.*b.^2.*l1.^2.*((a+(-1).*l1).*cos(t)+ ...
                  b.*sin(t)).^2.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)) ...
                  .^(-4).*(R.^2.*log(b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-1))+ ...
                  (1/2).*b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-2).*(b.*l1+(-4) ...
                  .*b.*R.*cos(t)+4.*(a+(-1).*l1).*R.*sin(t))));
    
    
elseif i1 == 0 && i2 == 1

     f = @(t) (1/2).*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^(-4).*( ...
                  b.^2.*l1.^2.*R.^2.*((-3)+2.*log(R)).*((-1).*R+a.*cos(t)+b.*sin(t)) ...
                  .*((a+(-1).*l1).*cos(t)+b.*sin(t))+(-1).*b.^2.*l1.^2.*(b.*cos(t)+( ...
                  -1).*a.*sin(t)).*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-1).*(b.*l1+( ...
                  -1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^2+R.^2.*(b.*cos(t)+( ...
                  -1).*a.*sin(t)).*(b.*cos(t)+((-1).*a+l1).*sin(t)).*(b.*l1+(-1).* ...
                  b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^2+(-1).*b.^2.*l1.^2.*((-1) ...
                  .*R+a.*cos(t)+b.*sin(t)).*((a+(-1).*l1).*cos(t)+b.*sin(t)).*(2.* ...
                  R.^2.*log(b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-1))+b.*l1.*( ...
                  b.*cos(t)+((-1).*a+l1).*sin(t)).^(-2).*(b.*l1+(-4).*b.*R.*cos(t)+ ...
                  4.*(a+(-1).*l1).*R.*sin(t))));

elseif i1 == 0 && i2 == 2
    
    f = @(t) (1/2).*l1.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^( ...
                 -4).*((-1).*b.^2.*l1.*R.^2.*((-1).*R+l1.*cos(t)).*((-3)+2.*log(R)) ...
                 .*((a+(-1).*l1).*cos(t)+b.*sin(t))+(-1).*b.^2.*l1.^2.*sin(t).*(b.* ...
                 cos(t)+((-1).*a+l1).*sin(t)).^(-1).*(b.*l1+(-1).*b.*R.*cos(t)+(a+( ...
                 -1).*l1).*R.*sin(t)).^2+R.^2.*sin(t).*(b.*cos(t)+((-1).*a+l1).* ...
                 sin(t)).*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^2+2.* ...
                 b.^2.*l1.*((-1).*R+l1.*cos(t)).*((a+(-1).*l1).*cos(t)+b.*sin(t)).* ...
                 (R.^2.*log(b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-1))+(1/2).* ...
                 b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-2).*(b.*l1+(-4).*b.*R.* ...
                 cos(t)+4.*(a+(-1).*l1).*R.*sin(t))));

elseif i1 == 1 && i2 == 1

    f = @(t) (1/2).*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^(-4).*( ...
                  (-1).*b.^2.*l1.^2.*R.^2.*((-3)+2.*log(R)).*((-1).*R+a.*cos(t)+b.* ...
                  sin(t)).^2+(-1).*R.^2.*(b.*cos(t)+(-1).*a.*sin(t)).^2.*(b.*l1+(-1) ...
                  .*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^2+b.^2.*l1.^2.*(b.*cos(t) ...
                  +(-1).*a.*sin(t)).^2.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-2).*(b.* ...
                  l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^2+2.*b.^2.*l1.^2.* ...
                  ((-1).*R+a.*cos(t)+b.*sin(t)).^2.*(R.^2.*log(b.*l1.*(b.*cos(t)+(( ...
                  -1).*a+l1).*sin(t)).^(-1))+(1/2).*b.*l1.*(b.*cos(t)+((-1).*a+l1).* ...
                  sin(t)).^(-2).*(b.*l1+(-4).*b.*R.*cos(t)+4.*(a+(-1).*l1).*R.*sin( ...
                  t))));


elseif i1 == 1 && i2 == 2
                  
    f = @(t) (1/2).*l1.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^( ...
                     -4).*(b.^2.*l1.*R.^2.*((-1).*R+l1.*cos(t)).*((-3)+2.*log(R)).*(( ...
                     -1).*R+a.*cos(t)+b.*sin(t))+R.^2.*sin(t).*((-1).*b.*cos(t)+a.*sin( ...
                     t)).*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)).^2+b.^2.* ...
                     l1.^2.*sin(t).*(b.*cos(t)+(-1).*a.*sin(t)).*(b.*cos(t)+((-1).*a+ ...
                     l1).*sin(t)).^(-2).*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.* ...
                     sin(t)).^2+(-1).*b.^2.*l1.*((-1).*R+l1.*cos(t)).*((-1).*R+a.*cos( ...
                     t)+b.*sin(t)).*(2.*R.^2.*log(b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin( ...
                     t)).^(-1))+b.*l1.*(b.*cos(t)+((-1).*a+l1).*sin(t)).^(-2).*(b.*l1+( ...
                     -4).*b.*R.*cos(t)+4.*(a+(-1).*l1).*R.*sin(t))));

              
elseif i1 == 2 && i2 == 2
    
    f = @(t) (1/2).*l1.^2.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)) ...
                      .^(-4).*((-1).*b.^2.*R.^2.*(R+(-1).*l1.*cos(t)).^2.*((-3)+2.*log( ...
                      R))+(-1).*R.^2.*sin(t).^2.*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1) ...
                      .*R.*sin(t)).^2+b.^2.*l1.^2.*sin(t).^2.*(b.*cos(t)+((-1).*a+l1).* ...
                      sin(t)).^(-2).*(b.*l1+(-1).*b.*R.*cos(t)+(a+(-1).*l1).*R.*sin(t)) ...
                      .^2+2.*b.^2.*(R+(-1).*l1.*cos(t)).^2.*(R.^2.*log(b.*l1.*(b.*cos(t) ...
                      +((-1).*a+l1).*sin(t)).^(-1))+(1/2).*b.*l1.*(b.*cos(t)+((-1).*a+ ...
                      l1).*sin(t)).^(-2).*(b.*l1+(-4).*b.*R.*cos(t)+4.*(a+(-1).*l1).*R.* ...
                      sin(t))));
    
else
    
    error('The indices of the summits are not supported! This should not happen.\n')
    
end





end

